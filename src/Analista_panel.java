
import javax.swing.*;
import java.util.ArrayList;
import java.util.Observer;
import java.util.Observable;


import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


/**
 *
 * @author ana
 */
public class Analista_panel extends javax.swing.JFrame implements Observer {

    //Mostrará una gráfica con las ventas de los últimos 7 días
    private ArrayList<Integer> simples;
    private ArrayList<Integer> compuestos;
    private int contador = 0;
    // private final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    
    
    private int nSimples = 0;
    private int nCompuestos = 0;
    private int simplesVendidos = 0;
    private int compuestosVendidos = 0;
    public String mensajeSimples = "";
    public String mensajeCompuestos = "";
    
    /**
     * Creates new form Analista_panel
     */
    public Analista_panel() {
        initComponents();
        simples = new ArrayList<>();
        compuestos = new ArrayList<>();
        JFreeChart chart = ChartFactory.createBarChart("Título de la gráfica", "Etiqueta del eje X", "Etiqueta del eje Y", dataset, PlotOrientation.VERTICAL, true, true, false);
ChartPanel chartPanel = new ChartPanel(chart);
JFrame frame = new JFrame("Mi ventana");
frame.getContentPane().add(chartPanel);
frame.pack();
frame.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analista_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analista_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analista_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analista_panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Analista_panel().setVisible(true);
            }
        });
    }
    
    @Override
    public void update(Observable o, Object arg){
        //Se le avisa de los productos disponibles en la tienda y los que ya se han vendido
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex){
            //Logger.getLogger()
        }

        System.out.println("update de analista");
        
        Panaderia panaderia = (Panaderia) o;

        nSimples = panaderia.getNSimples();
        nCompuestos = panaderia.getNCompuestos();
        simplesVendidos = panaderia.getSimplesVendidos();
        compuestosVendidos = panaderia.getCompuestosVendidos();

        
        mensajeSimples = "El número de productos simples en stock es " + nSimples + " y el número de productos simples que ya se han vendido es " + simplesVendidos;
        mensajeCompuestos = "El número de productos compuestos en stock es " + nCompuestos + " y el número de productos compuestos que ya se han vendido es " + compuestosVendidos;

    }
    
    public String getStock(){
        return ("analista: " + mensajeSimples + mensajeCompuestos);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
